/*** Generated by streamline --lines-mark 0.1.11 - DO NOT EDIT ***/

var __global = typeof global !== 'undefined' ? global : window;
function __cb(_, fn) { var ctx = __global.__context; return function(err, result) { __global.__context = ctx; if (err) return _(err); return fn(null, result); } }
function __future(fn, args, i) { if (!fn) throw new Error("anonymous function requires callback"); var done, err, result; var cb = function(e, r) { done = true; err = e, result = r; }; args = Array.prototype.slice.call(args); args[i] = function(e, r) { cb(e, r); }; fn.apply(this, args); return function(_) { if (typeof _ !== "function") throw new Error("future requires callback"); if (done) _.call(this, err, result); else cb = _.bind(this); }.bind(this); }
function __propagate(_, err) { try { _(err); } catch (ex) { __trap(ex); } }
function __trap(err) { if (err) { if (__global.__context && __global.__context.errorHandler) __global.__context.errorHandler(err); else console.error("UNCAUGHT EXCEPTION: " + err.message + "\n" + err.stack); } }
/*     1 */ var assert = require("assert");
/*     6 */ var db = require("./setup");
/*    10 */ var data = {
/*    11 */   name: "Daniel Gasienica",
/*    12 */   magicNumber: 42,
/*    13 */   lovesIceCream: true
            };
/*    16 */ var newData = {
/*    17 */   name: "Daniel Gasienica",
/*    18 */   father: {
/*    19 */     firstName: "Jan",
/*    20 */     lastName: "Gasienica"
              },
/*    22 */   tired: false
            };
/*    27 */ function getNodeId(url) {
/*    28 */   var NODE_REGEX = /node\/(\d+)/g;
/*    29 */   var match = NODE_REGEX.exec(url);
/*    30 */   return (match ? parseInt(match[1]) : null);
            };
/*    35 */ module.exports = function __1(beforeExit, _) {
              if (!_) {
                return __future(__1, arguments, 1);
              }
            ;
              var __ = _;
/*    40 */   return db.createNode(data, __cb(_, function(__0, url1) {
/*    41 */     var id = getNodeId(url1);
/*    43 */     return db.getNode(id, __cb(_, function(__0, res2) {
/*    44 */       assert.deepEqual(res2, data, "Retrieved data does not match original data.");
/*    46 */       return db.updateNode(id, newData, __cb(_, function(__0, res3) {
/*    47 */         return db.getNode(id, __cb(_, function(__0, res4) {
/*    48 */           assert.deepEqual(res4, newData, "Retrieved data does not match updated data.");
/*    50 */           return db.deleteNode(id, __cb(_, function() {
                        return function(__) {
                          return function(_) {
                            try {
/*    53 */                   return db.getNode(id, __cb(_, function() {
/*    54 */                     assert.fail("Found node even though it was deleted.");
                                return __();
                              }));
                            } catch (e) {
                              return __propagate(_, e);
                            };
                          }(function(err, __result) {
                            try {
                              if (err) {
/*    56 */                     assert.strictEqual(err.statusCode, 404, "Nonexistent node returned non-404 error.");
                              }
                               else return _(null, __result)
                            ;
                            } catch (e) {
                              return __propagate(_, e);
                            };
                            return __();
                          });
                        }(function() {
                          try {
                            return __();
                          } catch (e) {
                            return __propagate(_, e);
                          };
                        });
                      }));
                    }));
                  }));
                }));
              }));
            };
