/*** Generated by streamline --lines-mark 0.1.9 - DO NOT EDIT ***/

var __global = typeof global !== 'undefined' ? global : window;
function __cb(_, fn) { var ctx = __global.__context; return function(err, result) { __global.__context = ctx; if (err) return _(err); return fn(null, result); } }
function __propagate(_, err) { try { _(err); } catch (ex) { __trap(ex); } }
function __trap(err) { if (err) { if (__global.__context && __global.__context.errorHandler) __global.__context.errorHandler(err); else console.error("UNCAUGHT EXCEPTION: " + err.message + "\n" + err.stack); } }
            (function(_) {
              var __ = (_ = (_ || __trap));
/*    94 */   function getNodeId(url) {
/*    95 */     var NODE_REGEX = /node\/(\d+)/g;
/*    96 */     var match = NODE_REGEX.exec(url);
/*    97 */     return (match ? parseInt(match[1]) : null);
              };
/*     4 */   var assert = require("assert");
/*     5 */   var neo4j = require("../lib/neo4j.js");
/*     8 */   var DB_HOST = "localhost";
/*     9 */   var DB_PORT = 7474;
/*    10 */   var db = new neo4j.Client(DB_HOST, DB_PORT, true);
/*    13 */   var data = {
/*    14 */     name: "Daniel Gasienica",
/*    15 */     magicNumber: 42,
/*    16 */     lovesIceCream: true
              };
/*    18 */   var newData = {
/*    19 */     name: "Daniel Gasienica",
/*    20 */     father: {
/*    21 */       firstName: "Jan",
/*    22 */       lastName: "Gasienica"
                },
/*    24 */     tired: false
              };
/*    32 */   return db.createNode(data, __cb(_, function(__0, res1) {
/*    33 */     var id = getNodeId(res1);
/*    35 */     return db.getNode(id, __cb(_, function(__0, res2) {
/*    36 */       assert.deepEqual(res2, data, "Retrieved data does not match original data.");
/*    38 */       return db.updateNode(id, newData, __cb(_, function(__0, res3) {
/*    39 */         return db.getNode(id, __cb(_, function(__0, res4) {
/*    40 */           assert.deepEqual(res4, newData, "Retrieved data does not match updated data.");
/*    42 */           return db.deleteNode(id, __cb(_, function() {
                        return function(__) {
                          return function(_) {
                            try {
/*    45 */                   return db.getNode(id, __cb(_, function() {
/*    46 */                     assert.fail("Found node even though it was deleted.");
                                return __();
                              }));
                            } catch (e) {
                              return __propagate(_, e);
                            };
                          }(function(err, __result) {
                            try {
                              if (err) {
/*    48 */                     assert.strictEqual(err.statusCode, 404, "Nonexistent node returned non-404 error.");
                              }
                               else return _(null, __result)
                            ;
                            } catch (e) {
                              return __propagate(_, e);
                            };
                            return __();
                          });
                        }(function() {
                          try {
/*    54 */                 function transform(o) {
/*    55 */                   return neo4j.deserialize(neo4j.serialize(o));
                            };
/*    58 */                 assert.deepEqual(transform(data), data);
/*    59 */                 assert.deepEqual(transform(newData), newData);
/*    61 */                 var o;
/*    64 */                 o = 1;
/*    65 */                 assert.strictEqual(transform(o), o);
/*    68 */                 o = "gasi";
/*    69 */                 assert.strictEqual(transform(o), o);
/*    72 */                 o = true;
/*    73 */                 assert.strictEqual(transform(o), o);
/*    76 */                 o = [true,false,true,];
/*    77 */                 assert.throws(transform(o));
/*    80 */                 o = {
/*    80 */                   "this.that": "shouldn't work"
                            };
/*    81 */                 assert.notDeepEqual(transform(o), o);
/*    90 */                 function print(error, result) {
/*    91 */                   console.log(((error || result) || ""));
                            };
                            return __();
                          } catch (e) {
                            return __propagate(_, e);
                          };
                        });
                      }));
                    }));
                  }));
                }));
              }));
            })();
